#!/usr/bin/env node

const { spawn } = require('child_process')
const getGommitBinaryPath = require('../lib/getGommitBinaryPath')
const installGommit = require('../lib/installGommit')
const writeTemplate = require('../lib/writeTemplate')

const gommit = getGommitBinaryPath()
const args = process.argv.slice(2)

// gommitjs gommit-path --help
if (args[0] === 'gommit-path' && args.includes('--help')) {
  console.log([
    'Retrieves the path to the installed gommit binary',
    '',
    'Usage:',
    '  gommitjs gommit-path'
  ].join('\n'))
// gommitjs init --help
} else if (args[0] === 'init' && args.includes('--help')) {
  console.log([
    'Create the gommit config and git commit hook files for this project',
    '',
    'Usage:',
    '  gommitjs init [flags]',
    '',
    'Flags:',
    '  --overwrite      Determines if config and commit hook files should be overwritten'
  ].join('\n'))
// gommitjs update --help
} else if (args[0] === 'update' && args.includes('--help')) {
  console.log([
    'Download a new version of the gommit binary',
    '',
    'Usage:',
    '  gommitjs update [tag] [flags]',
    '',
    'Flags:',
    '  --overwrite   Determines if the commit hook file should be overwritten',
    '  --prefix      The prefix to write the gommit binary to (default: tools folder in the gommitjs package folder)',
    '',
    'Arguments:',
    '  tag           The tag to download (default: "latest")'
  ].join('\n'))
// gommitjs gommit-path
} else if (args[0] === 'gommit-path') {
  console.log(getGommitBinaryPath())
// gommitjs update [tag]
//
// Examples:
// gommitjs update latest
// gommitjs update v2.0.0
} else if (args[0] === 'update') {
  const tag = args[1] && args[1][0] !== '-' ? args[1] : 'latest'
  const overwrite = args.includes('--overwrite')
  const prefix = (function () {
    const k = args.findIndex(arg => arg.startsWith('--prefix'))
    return k > 0 ? (args[k].split('=')[1] || args[k + 1]) : null
  }())

  installGommit(tag, { prefix }).then(({ path, tag }) => {
    console.log(`gommit ${tag} installed at ${path}`)
    return path
  }).then(gommitPath => {
    return writeTemplate('commit-msg', { prefix: '.git/hooks', mode: 0o755, overwrite })
      .then(({ path, state }) => {
        if (state === 'unmodified') {
          console.log('Please ensure .git/hooks/commit-msg is using the following path to gommit: ' + gommitPath)
        } else {
          console.log(`git commit message hook written at ${path} : ${state}`)
        }
      })
  }).catch(error => {
    console.error(error)
  })
// gommitjs init [--overwrite]
} else if (args[0] === 'init') {
  const overwrite = args.includes('--overwrite')

  Promise.all(
    [
      writeTemplate('.gommit.toml', { overwrite }),
      writeTemplate('commit-msg', { prefix: '.git/hooks', mode: 0o755, overwrite })
    ]
  ).then(([config, hook]) => {
    console.log(`gommit config written at ${config.path} : ${config.state}`)
    console.log(`git commit message hook written at ${hook.path} : ${hook.state}`)
  }).catch(error => {
    console.error(error)
  })
// gommitjs [command] {options}
// See: https://github.com/antham/gommit#usage
} else {
  spawn(gommit, args, {
    cwd: process.cwd(),
    stdio: 'inherit'
  }).on('error', error => {
    throw error
  })
}
